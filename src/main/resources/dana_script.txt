create table MEMBER
(
    ID       VARCHAR2(255) not null,
    CODE     NUMBER        not null
        constraint MEMBER_PK
            primary key,
    PASSWORD VARCHAR2(255) not null,
    NICKNAME VARCHAR2(255) not null
)
/

create table STORE
(
    S_ID        VARCHAR2(255)    not null,
    S_CODE      NUMBER           not null
        constraint STORE_PK
            primary key,
    S_PASSWORD  VARCHAR2(255)    not null,
    S_NAME      VARCHAR2(255)    not null,
    S_IS_OPEN   CHAR default 'N' not null,
    S_PHONE     VARCHAR2(255),
    S_ADDRESS   VARCHAR2(255),
    S_BIZNUMBER NUMBER           not null
)
/

create table MENU
(
    MENU_CODE  VARCHAR2(255) not null
        constraint MENU_PK
            primary key,
    MENU_NAME  VARCHAR2(255) not null,
    MENU_PRICE NUMBER        not null,
    ISORDER    CHAR          not null,
    S_CODE     NUMBER        not null
        constraint MENU_FK
            references STORE,
    ORDER_CODE VARCHAR2(255) not null
)
/

create table MONEY
(
    "OPTION"   VARCHAR2(255) not null,
    CODE       NUMBER        not null
        constraint MONEY_FK
            references MEMBER,
    MONEY      NUMBER        not null,
    MONEY_DATE DATE,
    MONEY_CODE VARCHAR2(255) not null
        primary key
)
/

create table ORDERS
(
    CODE           NUMBER        not null
        constraint ORDERS_FK
            references MEMBER,
    ORDER_CODE     VARCHAR2(255) not null
        primary key,
    ORDER_DATE     DATE          not null,
    TOTAL_QUANTITY VARCHAR2(255) not null,
    TOTAL_AMOUNT   VARCHAR2(255) not null,
    STATUS         NUMBER        not null
)
/

create table ORDER_MENU
(
    ORDER_CODE      VARCHAR2(255) not null
        constraint ORDER_MENU
            references ORDERS,
    MENU_ORDER_CODE VARCHAR2(255) not null
        constraint ORDER_MENU_PK
            primary key,
    MENU_CODE       VARCHAR2(255) not null
        constraint ORDER_MENU_FK
            references MENU,
    AMONT           NUMBER        not null
)
/

create table REVIEW
(
    REVIEW_CODE  VARCHAR2(255) not null
        constraint REVIEW_PK
            primary key,
    CONTENT      VARCHAR2(300),
    REVIEW_DATE  VARCHAR2(255) not null,
    REVIEW_STAR  NUMBER        not null,
    REVIEW_REPLY VARCHAR2(300),
    ORDER_CODE   VARCHAR2(255) not null
        constraint REVIEW_FK
            references ORDERS
)
/


create sequence store_seq
increment by 1
start with 1
nocache
nocycle;

select store_seq.currval from dual;

select * from USER_SEQUENCES;

select * from STORE;

alter table MENU drop column ORDER_CODE;
alter table MENU modify ISORDER default 'Y';


create sequence menu_seq
increment by 1
start with 1
nocache
nocycle ;

alter table STORE add (S_X number, S_Y number);

update STORE Set S_X = 126.984985078053, S_Y = 37.5728606760461 where S_CODE = 4;
update STORE Set S_X = 126.987158771043, S_Y = 37.572013366472 where S_CODE = 5;

update STORE set S_IS_OPEN = 'Y' where S_CODE = 4;

CREATE INDEX store_inx01 on STORE (S_X ASC, S_Y ASC);


-- 좌표 거리 계산 radians 함수 생성
CREATE OR REPLACE FUNCTION RADIANS(nDegrees IN NUMBER)
    RETURN NUMBER DETERMINISTIC
    IS
BEGIN
    /*
    -- radians = degrees / (180 / pi)
    -- RETURN nDegrees / (180 / ACOS(-1)); but 180/pi is a constant, so...
    */
    RETURN nDegrees / 57.29577951308232087679815481410517033235;
END RADIANS;

-- distance 리턴 함수
CREATE OR REPLACE FUNCTION DISTNACE_WGS84( Y1 IN NUMBER, X1 IN NUMBER, Y2 IN NUMBER, X2 IN NUMBER)
    RETURN NUMBER DETERMINISTIC
    IS
BEGIN
    RETURN (
            6371.0 * ACOS(
                        COS( RADIANS( Y1 ) ) * COS( RADIANS( Y2 /* 위도 */ ) )
                        * COS( RADIANS( X2 /* 경도 */ ) - RADIANS( X1 ) )
                    +
                        SIN( RADIANS( Y1 ) ) * SIN( RADIANS( Y2 /* 위도 */ ) )
            ));
end DISTNACE_WGS84;

-- 연관관계 삭제 cascade 재설정
ALTER TABLE MENU DROP CONSTRAINT MENU_FK;

ALTER TABLE MENU
ADD CONSTRAINT FK_MENU_STORE
FOREIGN KEY (S_CODE) REFERENCES STORE(S_CODE)
ON DELETE CASCADE;

commit;

